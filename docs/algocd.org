#+TITLE: AlgoCD

* init
こんなかんじでポチポチする。
ユーザ/パスなどは今のところ変えなくて良いかな…？

#+begin_example
❯ cd ops/k8s/argocd
❯ make apply
NAME: argo
LAST DEPLOYED: Sat Jan 15 07:05:06 2022
NAMESPACE: argocd
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
In order to access the server UI you have the following options:

1. kubectl port-forward service/argo-argocd-server -n argocd 8080:443

    and then open the browser on http://localhost:8080 and accept the certificate

2. enable ingress in the values file `server.ingress.enabled` and either
      - Add the annotation for ssl passthrough: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#option-1-ssl-passthrough
      - Add the `--insecure` flag to `server.extraArgs` in the values file and terminate SSL at your ingress: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#option-2-multiple-ingress-objects-and-hosts


After reaching the UI the first time you can login with username: admin and the random password generated during the installation. You can find the password by running:

kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

(You should delete the initial secret afterwards as suggested by the Getting Started Guide: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#4-login-using-the-cli)
#+end_example

要するに、ポートフォワードしたら、 localhost:8080 へアクセスして、 Username: admin / Password: ~${kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
}~ でログインできますよ、ということを言っています。
* argocd を用いたログイン
local cli である argocd を使って、 ArgoCD をコマンドラインで叩いてみる

#+begin_example
❯ argocd login localhost:8080 --server service/argo-argocd-server --password ${kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
}
Username: admin
'admin:login' logged in successfully
Context 'admin' updated
#+end_example

試しに ArgoCD のアカウントリストを見てみると次のような感じ

#+begin_example
❯ argocd account list
NAME   ENABLED  CAPABILITIES
admin  true     login
#+end_example


* 最初のアプリ
https://argo-cd.readthedocs.io/en/stable/getting_started/ の UI を見ながらポチポチする

ポチポチして sync できたら、deploy した guestbook を見に行く
#+begin_src shell
kubectl port-forward $(kubectl get pod -n default --selector="app=helm-guestbook" -o jsonpath='{.items[0].metadata.name}') -n default 3030:80
#+end_src

angular か redis かで動作はちゃんとしないですが、画面は見れる模様 (localhost:3030)

* 振り返り
- algo-helm はすごく簡単に導入できる反面、中で何がどうなっているとかを把握するのが大変なので大変 (小並感)

- 実運用するなら、resync 以外は手動の CLI でやるようにしないといけないのかなというところ
  - ポチポチしてたら rollback / delete しちゃいました :pien_face: とか始末書物なので
  - あるいは権限持った人以外は readonly https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/ にするとか…？

- 権限周りでいうと、https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/google/ をちゃんとやる必要があって、これをやるためには AlgoCD Server は静的アドレスを持っている必要がありそう

  - RBAC の設定について https://qiita.com/tomozo6/items/e4680b6a130f162abba2
  - Google Auth のやり方 https://argo-cd.readthedocs.io/en/latest/operator-manual/user-management/google/

- 既存の helm を algocd に移す方法をきちんとチュートリアルできていないので、調べたいところ

  see. https://medium.com/@ch1aki/argocd%E3%81%A7helm%E3%82%92%E4%BD%BF%E3%81%86%E6%96%B9%E6%B3%95%E3%81%A8%E6%97%A2%E5%AD%98%E3%81%AErelease%E3%82%92argocd%E7%AE%A1%E7%90%86%E3%81%B8%E7%A7%BB%E8%A1%8C%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95-9108295887

  - 特に削除周りは helm delete 経由のものと algocd 経由のもので割れそう

- Cloud Run とかやろうと思ったら PipeCD のほうが良いのではの気持ち
